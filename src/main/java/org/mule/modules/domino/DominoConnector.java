/**
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 **/
        
/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.modules.domino;

import lotus.domino.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.mule.api.ConnectionExceptionCode;
import org.mule.api.annotations.*;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.display.Password;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;

import java.util.Map;

/**
 * Cloud Connector
 *
 * @author Arbuz LLC.
 */
@Connector(name="domino", schemaVersion="1.0-SNAPSHOT", description = "Domino Integration", friendlyName = "Domino",
           connectivityTesting = ConnectivityTesting.DISABLED)
public class DominoConnector
{

    protected transient Log logger = LogFactory.getLog(getClass());

    private Session session;
    private Database database;

    private String sessionToken;


    /**
     * Configurable
     */
    @Configurable
    private String serverName;

    /**
     * Configurable
     */
    @Configurable
    private String databaseName;

    /**
     * Configurable
     */
    @Configurable
    private String host;

    /**
     * Configurable
     */
    @Configurable
    private String port;

    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, @Password String password)
        throws ConnectionException {

        try {
            session  = NotesFactory.createSession(host + ":" + port, username, password);
            database = session.getDatabase(serverName, databaseName);

            sessionToken = session.hashCode() + "";//TODO check why session.getSessionToken() is not working
        } catch(NotesException ne) {
            ne.printStackTrace();
            throw new ConnectionException(ConnectionExceptionCode.UNKNOWN, null, ne.getMessage(), ne);
        }
    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() throws Exception {
        /*
         * CODE FOR CLOSING A CONNECTION GOES HERE
         */
        if (database != null)
            database.recycle();
        if (session != null)
            session.recycle();
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return session != null && database != null;
    }

    /**
     * Connection identifier
     */
    @ConnectionIdentifier
    public String connectionId() {
        return sessionToken;
    }

    /**
     * Invokes read method on Domino database
     *
     * {@sample.xml ../../../doc/Domino-connector.xml.sample domino:read}
     *
     * @param unid universal id
     * @return dxl payload
     * @throws NotesException when document can not be found
     */
    @Processor
    public String read(String unid) throws NotesException {
        logger.trace("read dxl");
        String dxl = null;
        Document document = database.getDocumentByUNID(unid);
        if (document != null) {
            DxlExporter ixp = null;
            try {
                ixp = session.createDxlExporter();
                ixp.setOutputDOCTYPE(false);
                ixp.setForceNoteFormat(false);
                dxl = ixp.exportDxl(document);
            } finally {
                document.recycle();
                if (ixp != null)
                    ixp.recycle();
            }
        }
        return dxl;
    }

    /**
     * Import DXL into Domino database using DXLIMPORTOPTION_CREATE option
     *
     * {@sample.xml ../../../doc/Domino-connector.xml.sample domino:create}
     *
     * @param dxl dxl payload
     * @throws NotesException when document can not be created
     */
    @Processor
    public void create(String dxl) throws NotesException
    {
        logger.trace("create dxl");
        DxlImporter imp = session.createDxlImporter();
        try {
            imp.setDocumentImportOption(DxlImporter.DXLIMPORTOPTION_CREATE);
            imp.importDxl(dxl, database);
        } finally {
            imp.recycle();
        }
    }

    /**
     * Import DXL into Domino database using DXLIMPORTOPTION_UPDATE_ELSE_IGNORE option
     *
     * {@sample.xml ../../../doc/Domino-connector.xml.sample domino:update}
     *
     * @param dxl dxl payload
     * @throws NotesException when document can not be updated
     */
    @Processor
    public void update(String dxl) throws NotesException
    {
        logger.trace("update dxl");
        DxlImporter imp = session.createDxlImporter();
        try {
            imp.setReplaceDbProperties(false);
            imp.setDocumentImportOption(DxlImporter.DXLIMPORTOPTION_UPDATE_ELSE_IGNORE);
            imp.importDxl(dxl, database);
        } finally {
            imp.recycle();
        }
    }

    /**
     * Find DXL by query
     *
     * {@sample.xml ../../../doc/Domino-connector.xml.sample domino:find}
     *
     * @param dxl dxl payload
     * @return Domino document
     * @throws NotesException when document can not be found
     */
    @Processor
    public String find(String dxl) throws NotesException {
        logger.trace("find dxl");

        String response = null;
        Document document = findDocument(dxl);
        if (document != null) {
            DxlExporter ixp = null;
            try {
                ixp = session.createDxlExporter();
                ixp.setOutputDOCTYPE(false);
                ixp.setForceNoteFormat(false);
                response = ixp.exportDxl(document);
            } finally {
                document.recycle();
                if (ixp != null)
                    ixp.recycle();
            }
        }

        return response;
    }

    private Document findDocument(String query) throws NotesException {
        logger.trace("find");

        Document document = null;
        View v = database.createView("", query);
        ViewEntryCollection vc = v.getAllEntries();
        ViewEntry entry = vc.getFirstEntry();
        while (entry != null) {

            if (entry.isDocument()) {
                document = entry.getDocument();
                break;
            } else {
                entry.recycle();
            }

            entry = vc.getNextEntry();
        }

        v.recycle();
        vc.recycle();

        return document;
    }

    /**
     * Invoke delete method on Domino database
     *
     * {@sample.xml ../../../doc/Domino-connector.xml.sample domino:delete}
     *
     * @param unid universal id
     *
     * @return True if success, otherwise FALSE
     * @throws NotesException when document can not be deleted
     */
    @Processor
    public boolean delete(String unid) throws NotesException
    {
        logger.trace("delete");
        Document document = database.getDocumentByUNID(unid);

        if (document == null)
            return false;

        return document.remove(true);
    }

    /**
     * Set server name property
     *
     * @param serverName Server name
     */
    public void setServerName(String serverName)
    {
        this.serverName = serverName;
    }

    public String getServerName(){
        return this.serverName;
    }

    public String getDatabaseName() {
        return databaseName;
    }

    /**
     * Set database name property
     *
     * @param databaseName Server name
     */
    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }

    public String getHost() {
        return host;
    }

    /**
     * Set host property
     *
     * @param host host
     */
    public void setHost(String host) {
        this.host = host;
    }

    public String getPort() {
        return port;
    }

    /**
     * Set port property
     *
     * @param port host
     */
    public void setPort(String port) {
        this.port = port;
    }

}
